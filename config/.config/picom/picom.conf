#################################
#           Backend             #
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

#################################
#           GLX backend         #
#################################

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
# glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
# glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#glx-swap-method = "undefined"; #deprecated !
#use-damage = true

###########
# Shadows #
###########

shadow = true;
shadow-radius = 12;
shadow-offset-x = -12;
shadow-offset-y = -6;
shadow-opacity = 0.6;

# shadow = true;
# shadow-radius = 25;
# shadow-offset-x = -25;
# shadow-offset-y = -25;
# shadow-opacity = 0.7;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;

# The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
#   "! name~=''",
    "name = 'Notification'",
    "name *= 'VLC'",
    "class_g = 'Conky'",
    "class_g ?= 'Notify-osd'",
# disables shadows on i3 frames
    #"class_g ?= 'i3-frame'",
    #"_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_FULLSCREEN'",
    "_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_FULLSCREEN'",
    "_NET_WM_STATE@[1]:32a = '_NET_WM_STATE_FULLSCREEN'",
    "_NET_WM_STATE@[2]:32a = '_NET_WM_STATE_FULLSCREEN'",
    "_NET_WM_STATE@[3]:32a = '_NET_WM_STATE_FULLSCREEN'",
    "_NET_WM_STATE@[4]:32a = '_NET_WM_STATE_FULLSCREEN'"
];
# can not for the life of me figure out how to guarantee no shadows on fullscreen/maximized applications


# Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
shadow-ignore-shaped = true;

# Rounded Corners (picom-ibhagwan-git on AUR)
corner-radius = 12;
round-borders = 1;
rounded-corners-exclude = [
"class_g = 'Polybar'",
"fullscreen",
"_PICOM_ROUNDED@:32c = 1",
"height < 30 || width < 30"
];

#################################
#     Background-Blurring       #
#################################

# blur: {
#   # requires: https://github.com/ibhagwan/picom
#   method = "dual_kawase";
#   #method = "kernel";
#   strength = 0;
#   # deviation = 1.0;
#   # kernel = "11x11gaussian";
#   background = false;
#   background-frame = false;
#   background-fixed = false;
#   kern = "3x3box";
# }

# Exclude conditions for background blur.
# blur-background-exclude = [
  #"window_type = 'dock'",
  #"window_type = 'desktop'",
  #"class_g = 'URxvt'",
  #
  # prevents picom from blurring the background
  # when taking selection screenshot with `main`
  # https://github.com/naelstrof/maim/issues/130
#   "class_g = 'slop'",
#   "_GTK_FRAME_EXTENTS@:c",
#   "class_g = 'Peek'",
#   "class_g *?= 'GLava'",
#   "class_g *?= 'gw2-64.exe'"
# ];

#################################
#   Transparency / Opacity      #
#################################


# Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 1
inactive-opacity = 0.96;

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
# frame-opacity = 1.0
frame-opacity = 1;

# Default opacity for dropdown menus and popup menus. (0.0 - 1.0, defaults to 1.0)
# menu-opacity = 0.8
# menu-opacity is depreciated use dropdown-menu and popup-menu instead.

#If using these 2 below change their values in line 510 & 511 aswell
popup_menu = { opacity = 0.8; }
dropdown_menu = { opacity = 0.8; }
utility = { opacity = 0.8; };

# Let inactive opacity set by -i override the '_NET_WM_OPACITY' values of windows.
# inactive-opacity-override = true
inactive-opacity-override = true;

# Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
active-opacity = 1.0;

# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
#inactive-dim = 0.06
inactive-dim = 0.1

# Specify a list of conditions of windows that should always be considered focused.
# focus-exclude = []
focus-exclude = [
  "class_g = 'Cairo-clock'",
  "class_g = 'Polybar'",                    # lemonbar
  "class_g = 'slop'"                    # maim
];

# Use fixed inactive dim value, instead of adjusting according to window opacity.
# inactive-dim-fixed = 1.0

# Specify a list of opacity rules, in the format `PERCENT:PATTERN`,
# like `50:name *= "Firefox"`. picom-trans is recommended over this.
# Note we don't make any guarantee about possible conflicts with other
# programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
# example:
#    opacity-rule = [ "95:class_g = 'URxvt'" ];
#

opacity-rule = [
  # "99:class_g     = 'discord'",
  # "100:class_g    = 'slop'",
  # "100:class_g    = 'XTerm'",
  # "100:class_g    = 'URxvt'",
  # "99:class_g     = 'Alacritty'",
  # "100:class_g     = 'Polybar'",
  # "100:class_g    = 'code-oss'",
  # "100:class_g    = 'Meld'",
  # "99:class_g     = 'TelegramDesktop'",
  # "99:class_g     = 'Joplin'",
  # "100:class_g    = 'firefox'",
  # "100:class_g    = 'Thunderbird'",
  # "100:class_g    = 'Virt-manager'",
  # "100:class_g    = 'Kodi'",
  # "100:class_g    = 'mpv'",
  # "100:class_g    = 'vlc'",
  # "100:class_g    = 'feh'",
  # "100:class_g    = 'Gthumb'",
  # "99:class_g     *?= 'Subl'",
  # "99:class_g     *?= 'codium'",
  # "100:class_g    *?= 'Firestorm'",
  # "100:class_g    *?= 'Steam'",
  # "100:class_g    *?= 'Xnview'",
  # "100:class_g    *?= 'Gimp'",
  # "100:class_g    *?= 'Inkscape'",
  # "100:class_g    *?= 'Blender'",
  # "100:class_g    *?= 'YacReader'",
  # "99:class_g     *?= 'emacs'",
  # "99:class_g     *?= 'Thunar'",
  # "99:class_g     *?= 'PCManFM'",
  # "100:class_g    *?= 'Brave'",
  # "100:class_g    *?= 'glava'",
  # "100:class_g    *?= 'gw2-64.exe'",
  # "100:class_g    *?= 'Singularity'",
  # "95:class_g     *?= 'signal'",
  # "99:class_g     *?= 'Mailspring'",
  # "100:class_g    *?= 'smplayer'",
  # "100:class_g    *?= 'VirtualBox'",
  # "100:class_g    *?= 'OBS'",
  # "100:class_g    *?= 'valheim'"
];


#################################
#           Fading              #
#################################


# Fade windows in/out when opening/closing and when opacity changes,
#  unless no-fading-openclose is used.
# fading = false
fading = true

# Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
# fade-in-step = 0.028
fade-in-step = 0.055;

# Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
# fade-out-step = 0.03
fade-out-step = 0.066;

# The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
# fade-delta = 10

# Specify a list of conditions of windows that should not be faded.
# fade-exclude = []

# Do not fade on window open/close.
no-fading-openclose = false;

# Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
# no-fading-destroyed-argb = false


#################################
#             Other             #
#################################

# Try to detect WM windows and mark them as active.
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus).
mark-ovredir-focused = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
# Usually more reliable but depends on a EWMH-compliant WM.
use-ewmh-active-win = true;
# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
refresh-rate = 144;

# Vertical synchronization: match the refresh rate of the monitor
vsync = false;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = false;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
unredir-if-possible = false;

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#################################
# Window type settings
#################################

wintypes :
{
  tooltip :
  {
    fade = true;
    shadow = false;
    opacity = 0.9;
    focus = true;
  };
  fullscreen :
  {
    fade = true;
    shadow = false;
    opacity = 1;
    focus = true;
  };
};

######################
#
# XSync
# See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
#
######################

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;
